/* tslint:disable */
/* eslint-disable */
/**
 * RDEPOT API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {
  AxiosResponse,
  AxiosInstance,
  AxiosRequestConfig
} from 'axios'
import { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError
} from '../base'
import { PythonRepositoryDto } from '../models'
import { ResponseDtoPagedModelEntityModelPythonRepositoryDto } from '../models'
/**
 * PythonRepositoryControllerApi - axios parameter creator
 * @export
 */
export const PythonRepositoryControllerApiAxiosParamCreator =
  function (configuration?: Configuration) {
    return {
      /**
       *
       * @param {PythonRepositoryDto} body
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      createRepository1: async (
        body: PythonRepositoryDto,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
          throw new RequiredError(
            'body',
            'Required parameter body was null or undefined when calling createRepository1.'
          )
        }
        const localVarPath = `/api/v2/manager/python/repositories`
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(
          localVarPath,
          'https://example.com'
        )
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }
        const localVarRequestOptions: AxiosRequestConfig = {
          method: 'POST',
          ...baseOptions,
          ...options
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication Bearer required

        localVarHeaderParameter['Content-Type'] =
          'application/json'

        const query = new URLSearchParams(
          localVarUrlObj.search
        )
        for (const key in localVarQueryParameter) {
          query.set(key, localVarQueryParameter[key])
        }
        for (const key in options.params) {
          query.set(key, options.params[key])
        }
        localVarUrlObj.search = new URLSearchParams(
          query
        ).toString()
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers
            ? baseOptions.headers
            : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers
        }
        const needsSerialization =
          typeof body !== 'string' ||
          localVarRequestOptions.headers![
            'Content-Type'
          ] === 'application/json'
        localVarRequestOptions.data = needsSerialization
          ? JSON.stringify(body !== undefined ? body : {})
          : body || ''

        return {
          url:
            localVarUrlObj.pathname +
            localVarUrlObj.search +
            localVarUrlObj.hash,
          options: localVarRequestOptions
        }
      },
      /**
       *
       * @param {boolean} [deleted]
       * @param {string} [name]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      getAllRepositories1: async (
        deleted?: boolean,
        name?: string,
        options: AxiosRequestConfig = {}
      ): Promise<RequestArgs> => {
        const localVarPath = `/api/v2/manager/python/repositories`
        // use dummy base URL string because the URL constructor only accepts absolute URLs.
        const localVarUrlObj = new URL(
          localVarPath,
          'https://example.com'
        )
        let baseOptions
        if (configuration) {
          baseOptions = configuration.baseOptions
        }
        const localVarRequestOptions: AxiosRequestConfig = {
          method: 'GET',
          ...baseOptions,
          ...options
        }
        const localVarHeaderParameter = {} as any
        const localVarQueryParameter = {} as any

        // authentication Bearer required

        if (deleted !== undefined) {
          localVarQueryParameter['deleted'] = deleted
        }

        if (name !== undefined) {
          localVarQueryParameter['name'] = name
        }

        const query = new URLSearchParams(
          localVarUrlObj.search
        )
        for (const key in localVarQueryParameter) {
          query.set(key, localVarQueryParameter[key])
        }
        for (const key in options.params) {
          query.set(key, options.params[key])
        }
        localVarUrlObj.search = new URLSearchParams(
          query
        ).toString()
        let headersFromBaseOptions =
          baseOptions && baseOptions.headers
            ? baseOptions.headers
            : {}
        localVarRequestOptions.headers = {
          ...localVarHeaderParameter,
          ...headersFromBaseOptions,
          ...options.headers
        }

        return {
          url:
            localVarUrlObj.pathname +
            localVarUrlObj.search +
            localVarUrlObj.hash,
          options: localVarRequestOptions
        }
      }
    }
  }

/**
 * PythonRepositoryControllerApi - functional programming interface
 * @export
 */
export const PythonRepositoryControllerApiFp = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {PythonRepositoryDto} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRepository1(
      body: PythonRepositoryDto,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<AxiosResponse<any>>
    > {
      const localVarAxiosArgs =
        await PythonRepositoryControllerApiAxiosParamCreator(
          configuration
        ).createRepository1(body, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     *
     * @param {boolean} [deleted]
     * @param {string} [name]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllRepositories1(
      deleted?: boolean,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => Promise<
        AxiosResponse<ResponseDtoPagedModelEntityModelPythonRepositoryDto>
      >
    > {
      const localVarAxiosArgs =
        await PythonRepositoryControllerApiAxiosParamCreator(
          configuration
        ).getAllRepositories1(deleted, name, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        }
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * PythonRepositoryControllerApi - factory interface
 * @export
 */
export const PythonRepositoryControllerApiFactory =
  function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
  ) {
    return {
      /**
       *
       * @param {PythonRepositoryDto} body
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async createRepository1(
        body: PythonRepositoryDto,
        options?: AxiosRequestConfig
      ): Promise<AxiosResponse<any>> {
        return PythonRepositoryControllerApiFp(
          configuration
        )
          .createRepository1(body, options)
          .then((request) => request(axios, basePath))
      },
      /**
       *
       * @param {boolean} [deleted]
       * @param {string} [name]
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       */
      async getAllRepositories1(
        deleted?: boolean,
        name?: string,
        options?: AxiosRequestConfig
      ): Promise<
        AxiosResponse<ResponseDtoPagedModelEntityModelPythonRepositoryDto>
      > {
        return PythonRepositoryControllerApiFp(
          configuration
        )
          .getAllRepositories1(deleted, name, options)
          .then((request) => request(axios, basePath))
      }
    }
  }

/**
 * PythonRepositoryControllerApi - object-oriented interface
 * @export
 * @class PythonRepositoryControllerApi
 * @extends {BaseAPI}
 */
export class PythonRepositoryControllerApi extends BaseAPI {
  /**
   *
   * @param {PythonRepositoryDto} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PythonRepositoryControllerApi
   */
  public async createRepository1(
    body: PythonRepositoryDto,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<any>> {
    return PythonRepositoryControllerApiFp(
      this.configuration
    )
      .createRepository1(body, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @param {boolean} [deleted]
   * @param {string} [name]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PythonRepositoryControllerApi
   */
  public async getAllRepositories1(
    deleted?: boolean,
    name?: string,
    options?: AxiosRequestConfig
  ): Promise<
    AxiosResponse<ResponseDtoPagedModelEntityModelPythonRepositoryDto>
  > {
    return PythonRepositoryControllerApiFp(
      this.configuration
    )
      .getAllRepositories1(deleted, name, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
